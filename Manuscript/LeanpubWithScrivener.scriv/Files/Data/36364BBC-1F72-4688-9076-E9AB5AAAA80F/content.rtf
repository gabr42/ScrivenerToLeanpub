{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Calibri;}{\f1\fmodern\fcharset0\fprq2 Calibri-Italic;}{\f2\fmodern\fcharset0\fprq2 Consolas;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ql\ltrch\loch {\f0\fs26\b0\i0 To insert a shorter segment of code, use the <$Scr_Cs::0>}{\f1\fs26\b0\i1 Code Span<!$Scr_Cs::0>}{\f0\fs26\b0\i0  format: <$Scr_Cs::1>}{\f2\fs22\b0\i0 Global.ActiveWriter.WriteLine(line)<!$Scr_Cs::1>}{\f0\fs26\b0\i0 .}
\par\plain \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 Alternatively, wrap the segment in backtick (`` ` ``) characters, as `shown here`, or in double backticks (``` `` ```) which allows you to use backticks ``in ` the ` segment``.}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 To insert a longer piece of code, format it with the <$Scr_Cs::0>}{\f1\fs26\b0\i1 Code Block<!$Scr_Cs::0>}{\f0\fs26\b0\i0  style:}
\par\plain \f0\fs26\b0\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f2\fs22\b0\i0 <$Scr_Ps::2>function TProcessor.Run: boolean;}
\par\plain {\f2\fs22\b0\i0 var}
\par\plain {\f2\fs22\b0\i0   processor: State;}
\par\plain {\f2\fs22\b0\i0 begin}
\par\plain {\f2\fs22\b0\i0   processor := State.BOF;}
\par\plain {\f2\fs22\b0\i0   while processor <> State.EOF do}
\par\plain {\f2\fs22\b0\i0     if not FProcessor[processor].Step(processor) then}
\par\plain {\f2\fs22\b0\i0       Exit(SetError(FProcessor[processor].ErrorMsg));}
\par\plain {\f2\fs22\b0\i0   Result := CheckReferences;}
\par\plain {\f2\fs22\b0\i0 end;<!$Scr_Ps::2>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ql\ltrch\loch {\f0\fs26\b0\i0 Attributes can be specified on the first line of a code block. The following example uses the `\{format: delphi\}` attribute to specify the Delphi language:}
\par\plain \f0\fs26\b0\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f2\fs22\b0\i0 <$Scr_Ps::2>\{format: delphi\}}
\par\plain {\f2\fs22\b0\i0 function TProcessor.Run: boolean;}
\par\plain {\f2\fs22\b0\i0 var}
\par\plain {\f2\fs22\b0\i0   processor: State;}
\par\plain {\f2\fs22\b0\i0 begin}
\par\plain {\f2\fs22\b0\i0   processor := State.BOF;}
\par\plain {\f2\fs22\b0\i0   while processor <> State.EOF do}
\par\plain {\f2\fs22\b0\i0     if not FProcessor[processor].Step(processor) then}
\par\plain {\f2\fs22\b0\i0       Exit(SetError(FProcessor[processor].ErrorMsg));}
\par\plain {\f2\fs22\b0\i0   Result := CheckReferences;}
\par\plain {\f2\fs22\b0\i0 end;<!$Scr_Ps::2>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 Leanpub uses Pygments formatter. For the list of supported languages see <http://pygments.org/languages/>.}}