{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Calibri;}{\f1\fnil\fcharset0\fprq2 Consolas;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch {\f0\fs26\b0\i0 \{#appendix_myWorkflow_scripts\}}
\par\plain \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 I\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92m running **`pushpreview.bat`** in a background when I work on a book. It runs the `scriv4lean` processor with the `/wait` switch. `Scriv4lean` waits until a new version of MultiMarkdown book is exported, converts it and exits. `Pushpreview` then checks the error level. If it is greater than 0 (meaning an error), the script simply starts `scriv4lean` again. Otherwise it pushes all modfied files to the `preview` branch of the repository and restarts the `scriv4lean` processor.}
\par\pard\plain \ltrch\loch \f1\fs22\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f1\fs22\b0\i0 <$Scr_Ps::0>@echo off}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 \tab h:}
\par\plain {\f1\fs22\b0\i0 \tab cd "\\pisanje\\knjige\\Writing your next Leanpub bestseller with Scrivener\\Leanpub"}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 :wait}
\par\plain {\f1\fs22\b0\i0     echo.}
\par\plain {\f1\fs22\b0\i0 \tab ..\\ScrivenerToLeanpub\\Win32\\Debug\\scriv4lean /wait /numbercitations ..\\LeanpubWithScrivener.mmd\\LeanpubWithScrivener.mmd .\\manuscript bibliography\\scriv4lean.bib}
\par\plain {\f1\fs22\b0\i0     echo.}
\par\plain {\f1\fs22\b0\i0 \tab if errorlevel 1 goto wait}
\par\plain {\f1\fs22\b0\i0 \tab echo.}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 \tab git checkout preview}
\par\plain {\f1\fs22\b0\i0 \tab git commit -a -m "scriv4lean preview"}
\par\plain {\f1\fs22\b0\i0 \tab git push}
\par\plain {\f1\fs22\b0\i0 \tab goto wait<!$Scr_Ps::0><$Scr_Ps::1>}
\par\pard\plain \tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sa160\sl262\slmult1\qc\ltrch\loch {\f0\fs26\b0\i0 Script <$n:script> : `pushpreview.bat` compiles the book on each change and commits changes to the repository<!$Scr_Ps::1>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 This script does not add or remove files from the git repository. You have to do it manually. You\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92ll have to add appropriate files on the first run and then each time you add new images to the book.}
\par\plain \f0\fs26\b0\i0
\par\plain {\f0\fs26\b0\i0 As you can see in the [next section](appendix_gitWorkflow), this approach in a bunch of commits called \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93scriv4lean preview\u8221\'94. This is not useful so occasionally (when I finish working on some topic and move to another) I run the **`squashRemotePreview.bat`** script which squashes multiple commits together and gives them a more appropriate commit message.}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f1\fs22\b0\i0 <$Scr_Ps::0>@echo off}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 \tab set /p num=Number of commits to squash:}
\par\plain {\f1\fs22\b0\i0 \tab if %num%.==. goto exit}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 \tab set /p msg=Commit message:}
\par\plain {\f1\fs22\b0\i0 \tab if "%msg%".=="." goto exit}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 \tab git reset --soft HEAD~%num%}
\par\plain {\f1\fs22\b0\i0 \tab git commit -m "%msg%"}
\par\plain {\f1\fs22\b0\i0 \tab git push origin +preview}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 :exit<!$Scr_Ps::0><$Scr_Ps::1>}
\par\pard\plain \tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sa160\sl262\slmult1\qc\ltrch\loch {\f0\fs26\b0\i0 Script <$n:script> : `squashRemovePreview.bat` squashes multiple commits together<!$Scr_Ps::1>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f1\fs22\b0\i0
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch {\f0\fs26\b0\i0 The script, based on [GitSquash] asks for the number of commits to squash together and the new commit message and then does its job. Its effects can be seen in the following section.}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl262\slmult1\ltrch\loch \f0\fs26\b0\i0
\par\plain \f0\fs26\b0\i0}