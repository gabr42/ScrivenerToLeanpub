<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="0415E04E-4E30-4B21-8D9B-DAF737E70CBB">
            <Title>Preview &lt;$year&gt;-&lt;$numericalmonth&gt;-&lt;$day&gt;T&lt;$time&gt;</Title>
            <Text>Remove this chapter before publishing!</Text>
        </Document>
        <Document ID="08F05C30-2668-4CF9-8502-8D0E602EAE51">
            <Title>Chapters and sections</Title>
            <Text>To insert a hyperlink to any document in the Draft folder, right-click in the document, hover over the Link to Document menu entry and find the document to link to in the sub-menus.
￼
Figure &lt;$n:figure&gt;: Linking to another document

Another option is to select Edit, Link to Document and proceed in the same manner. Or, you can press the `Alt` keyboard key and drag the document from the Binder onto the editor.

In all cases you’ll end with a hyperlink like this: Lists. 

To customize the hyperlink name displayed in the book, put the hyperlink text, wrapped in square brackets, immediately before the hyperlink. There should be no space between the two.

&lt;@r:example&gt;
If you insert text `[read more about formatting]` before the Formatting hyperlink you’ll get: [read more about formatting]Formatting.

You can also put a manual Markua anchor anywhere in the text and use normal Markua reference notation to link to it.

&lt;@r:example&gt;
The Quotes chapter contains manual anchor `{#console-format}` and the following link will bring you there: [console formatting](#console-format).

</Text>
        </Document>
        <Document ID="0B270F61-C20C-4926-9356-35F3A0EB33E2">
            <Title>ProWritingAid</Title>
        </Document>
        <Document ID="0E8C9432-8631-42F6-BACA-6B3748F84249">
            <Title>Images</Title>
            <Text>The `scriv4lean` converter supports two ways of placing images in a book:

The first option is to keep an image in a separate file and use the Insert, Image Linked to File… command to insert it into the document.
Alternatively, put images into Research/Images folder of the Scrivener document (or into any sub-folder of that folder) and then insert them with the Insert, Image Linked to Document command.

This book uses the second approach.

As documented in [Armstrong2019], GIF, PNG, JPEG, SVG and zipped SVG formats are supported in Markua. `Scriv4lean` does not check the format of the inserted image. If you insert an image in an unsupported format, Leanpub will ignore it during book preparation.

To change the appearance of the image, precede it with a list of attributes.. Supported attributes are defined in the Markua specification. The following image is inserted with attribute `{width: 66%}`:

{width: 66%}
￼
Figure &lt;$n:figure&gt;: Inserting an image from the Research/Images folder

{float: right}
￼
To insert a “floating” image, place it immediately before a paragraph (there must be exactly one newline between the image and the paragraph) and embellish it with the `float` tag. The image in this paragraph uses the `float: right` alignment. Other supported values are `left`, `inside`, and `outside`.

To provide a caption for the image, insert it just after the image and format it with the Caption style. This allows `scriv4lean` to automatically create list of figures (images) in the book.

&lt;@r:tip&gt;
There must en exactly one newline between the attributes and the image and exactly one newline between the image and its caption.

This book uses Scrivener `$n` placeholder to automatically number figures. This technique works fine if you need not refer to figures from other places in the document. The chapter on Tables shows a different, more flexible approach.

See &lt;@A:appendix_autoNumbering&gt; to learn how to generate a list of figures in the document.</Text>
        </Document>
        <Document ID="117139F9-24FE-4E5D-9C69-8533862202CF">
            <Title>Sticky bullet list</Title>
            <Text>An output like this …

This is a bullet list:
Item 1
Item 2
Item 3

… is created when you forget to put an empty line before the [list]Lists. Same goes for numbered lists.

This is a bullet list:

Item 1
Item 2
Item 3

</Text>
        </Document>
        <Document ID="117E7951-F54A-4B0C-BC35-F036A48F821B">
            <Title>git-smash</Title>
        </Document>
        <Document ID="15A71463-28A0-4F99-9800-5A3F37A7E78F">
            <Title>Tables</Title>
            <Text>Standard Scrivener tables require no extra work. Create a table in Scrivener and it will be exported. Regardless of how you align text in a Scrivener table cell, all cells are typeset left-aligned:


Header 1
Header 2
Header 3
Item a 1
Item a2
Item a3

**Table &lt;@N:table=table3by2&gt;:** First table

To set a table caption, put a text immediately after the table (separated only with one newline) and format it with a Table Caption style.

&lt;@r:tip&gt;
This book uses `@N` [macro](#appendix_macros) to number table captions. This allows you to refer to a table number with a `@r` macro, or link to it with an `@a` or `@A` macro.

Only first paragraph in each cell is exported. All other data just disappears when exported from Scrivener to MultiMarkdown. Compare the following table with the original in the Scrivener document:


Header 1
Header 1.1
Header 2
Item a 1
Item a 2
Item b 1
Item b 1.1
Item b 2

**Table &lt;@N:table=table2by3&gt;:** Second table

￼
Figure &lt;$n:figure&gt;: Original layout for the table above

`Scriv4lean` provides a way to specify column alignment in a table. If you end a header cell with a `&lt;-`, `&lt;&gt;`, or `-&gt;`, the column will be left-, center-, or right-aligned, respectively. In all three cases, a space must be inserted between the cell text and this special marker.

To provide for some (hard to imagine) circumstances where you would actually want to include such a marker at the end of a header cell, all header cells have to be marked with such “decorations” before they will do anything.

In the following table, the left column is right-aligned, central column is centered and right column is left-aligned.


Left -&gt;
Centered &lt;&gt;
Right &lt;-
Row 1, Col 1
Row 1, Col 2
Row 1, Col 3

**Table &lt;@N:table&gt;:** Centered and right-aligned columns

You can put attributes before the table to specify table width and column widths. The following table uses `width: 33%` to set the width of the table.

{width: 33%}
A
B
a
B

**Table &lt;@N:table&gt;:** Short names and attributes

&lt;@r:tip&gt;
A Markua table always starts with a header.

Always put one empty line before a table, otherwise `scriv4lean` cannot recognize it in the MultiMarkdown file.

There must be no empty line between the attributes and the table, just one newline.

See &lt;@A:appendix_autoNumbering&gt; to learn how to generate a list of tables in the document.</Text>
        </Document>
        <Document ID="16C1FE10-CEDB-42B1-8EAB-07DD84458F40">
            <Title>Quizes and exercises</Title>
            <Text>Scrivener and `scriv4lean` have no built-in support for quizes and excercises as specified in [Armstrong2019a]. You can still insert quizes and exercises in your book by writing Markua directly into the document, as shown in the following example.

{exercise, id: exercise1}
? How many letters are in the word scriv4lean?

a) 7
B) 8
c) 9
{/exercise}</Text>
        </Document>
        <Document ID="18398644-CA90-4A67-BB7A-7519A45CAA96">
            <Title>structure</Title>
        </Document>
        <Document ID="1A1D3E95-2E46-49D4-AFCF-1F919BA385DD">
            <Title>About me</Title>
            <Text>… programmer, writer - blog, magazine, books
… contact me: http://primoz.gabrijelcic.org
</Text>
        </Document>
        <Document ID="1B0D3DF0-18FA-4D3C-A6AA-5CE8D8DE1A22">
            <Title>Appendix &lt;$L&gt;: Leanpub meta-markdown</Title>
            <Text>{#appendix_LeanpubMMD}

This appendix describes sections of a Leanpub multi-markdown template, included styles and macros, supported by the `scriv4lean` converter.</Text>
        </Document>
        <Document ID="1DAE5C79-C54B-4CD0-93FB-0E92360E1F17">
            <Title>Front- and back matter</Title>
            <Text>The method described in the previous section doesn’t work if you want to link to a document in the front matter or back matter part of the book. The link will be placed in the document, but it won’t be correctly exported to MultiMarkdown. `Scriv4lean` offers an alternative solution.

Put an anchor on the first chapter (or section) line. For example, appendix &lt;@R:appendix_scriv4lean&gt; opens with line `{#appendix_scriv4lean}`.

You can use the `@R` [macro](#appendix_macros) to insert a title of a chapter or section, marked with such anchor. `&lt;​@R:appendix_scriv4lean&gt;` expands to “&lt;@R:appendix_scriv4lean&gt;”.

To insert the hyperlink to such a chapter or section, use the `@A` macro. `&lt;​@A:​​​appendix_scriv4lean&gt;` expands to “&lt;@A:appendix_scriv4lean&gt;”.

If you want to customize the hyperlink text, use the standard Markua notation to create the link. `[about scriv4lean](#appendix_scriv4lean)` expands to “[about scriv4lean](#appendix_scriv4lean)”.

</Text>
        </Document>
        <Document ID="1EFD2CBB-8364-4D68-BFAD-8C2B90FA558F">
            <Title>Macros</Title>
            <Text>{#appendix_macros}

`scriv4lean` implements a simple macro replacement system.

Macros are written in form `&lt;​​@command:parameters&gt;` where the `command` part is a single letter and is case sensitive. Following macro commands are recognized.

a
: Converts an identifier into an anchor associated with the identifier.
  Format: `&lt;​@a:identifier&gt;`

Identifier can be created in an auto-numbering macro (`@n`, `@N`) or by placing an anchor on the first line of a chapter or a section.

&lt;@r:example&gt;
One of the tables in this book uses macro `&lt;​@n:table=table2by3&gt;` in its caption. Besides generating a new table number, this macro associates an anchor to the table with the `table2by3` identifier. Macro `&lt;​@a:table2by3&gt;` therefore expands to `#anchor_to_table2by3`. This allows you to write “`[second table]​(&lt;@a:table2by3&gt;)`” to get “[second table](&lt;@a:table2by3&gt;)”.

A
: Converts an identifier into a hyperlink to the identifier.
  Format: `&lt;​@A:identifier&gt;`

The `&lt;​@A:identifier&gt;` macro expands to `[@R:identifier]​(@a:identifier)`. This in turn expands to `[name, associated with the identifier]​(#anchor_to_identifier)`, which is a valid Markua cross-reference.

The identifier can be created in the `@d` macro (using the `=_chapter` or `_section` variant) or by placing an anchor on the first line of a chapter or a section.

The `@A` macro is especially useful for linking to [front and back matter documents]Front- and back matter.

&lt;@r:example&gt;
First line in &lt;@R:appendix_myWorkflow&gt; is `{#appendix_myWorkflow}`. A link to this appendix can be created with “`&lt;​@A:appendix_myWorkflow&gt;`” which expands to “&lt;@A:appendix_myWorkflow&gt;”.

d
: Defines an identifier.
  Format: `&lt;​@d:identifier=value&gt;`, `&lt;​@d:identifier=_chapter&gt;`, `&lt;​@d:identifier=_section&gt;`

The `@d` macro has multiple use. In the first place, you can use it to define your own replacement strings. See the section on the `@r` macro for an example.

The `@d` macro can associate the number and name of the current chapter with an identifier when used in form `&lt;​@d:identifier=_chapter&gt;`. In this case, `_chapter` represents a special placeholder which is replaced with appropriate values. `&lt;​@r:identifier&gt;` then expands to the chapter number and `&lt;​@R:identifier&gt;` to the chapter title.

&lt;@r:example&gt;
The Lists chapter contains macro `&lt;​@d:ChLists=_chapter&gt;`. This makes “`&lt;​@r:ChLists&gt;`” expand to “&lt;@r:ChLists&gt;” and “`&lt;​@R:ChLists&gt;`” to “&lt;@R:ChLists&gt;”.

If an anchor `{#some_anchor}` is placed on a first line of a chapter, the `scriv4lean` converter internally executes macro `&lt;​@d:some_anchor=_chapter&gt;`.

The `@d` macro can associate the name of the current section with an identifier when used in form `&lt;​@d:identifier=_section&gt;`. In this case, `_section` represents a special placeholder which is replaced with the appropriate value. `&lt;​@R:identifier&gt;` then expands to the section title.

If an anchor `{#some_anchor}` is placed on a first line of a section, the `scriv4lean` converter internally executes macro `&lt;​@d:some_anchor=_section&gt;`.

r
: Replaces an identifier with the associated value.
  Format: `&lt;​@r:identifier&gt;`

The value of an identifier can be set with a `@d`, `@n`, or `@N` macro. It can also be set by placing an anchor of the first line of the chapter or a section which indirectly invokes a `@d` macro.

&lt;@r:example&gt;
The first sub-document in the front matter part of this book is a Text section `&lt;&lt;meta&gt;&gt;` with [section type](#appendix_sections) set to Section (Text). It contains two macros:

`&lt;​@d:tip={icon: lightbulb}&gt;`
`&lt;​@d:example={icon: eye}&gt;`

This allows me to start a tip with `&lt;​@r:tip&gt;` and an example with a `&lt;​@:example&gt;` instead of `{icon: lightbulb}` and `{icon: eye}`. If at some point I decide to change the icon used for tips or examples, I will simple update the `@d` macro in this section. Without this macro, I would have to replace `{icon: eye}` to `{icon: newicon}` in the whole document.


R
: Replaces an identifier with the associated caption.
  Format: `&lt;​@R:identifier&gt;`

Replaces an identifier with a chapter or section caption. The identifier can be set with the `@d` macro (using the `=_chapter` or `_section` variant) or by placing an anchor on the first line of a chapter or a section.

&lt;@r:example&gt;
The first line in this section is `{#appendix_macros}`. This associates identifier `appendix_macros` with the name of the section and turns “`&lt;​@R:appendix_macros&gt;`” to “`&lt;@R:appendix_macros&gt;`”.

n
: Generate auto-incremented number.
  Format: `&lt;​@n:group&gt;`, `&lt;​@n:group=identifier`&gt;

Generates next number in a group. Numbering starts with 1. If the `identifier` part is provided, macro also associates `identifier` with the generated number and location of the object (figure, table) preceding the macro. This allows you to use the `identifier` with `@a` and `@r` macros.

This book uses one numbering group — `table`. It is used to auto-number [tables]Tables.

&lt;@r:example&gt;
Macro `&lt;​@n:figure&gt;` would generate next figure number.

N
: Generate per-chapter auto-incremented number.
  Format: `&lt;​@N:group&gt;`, `&lt;​@N:group=identifier`&gt;

Generates next number in a group. Numbering restarts with 1 in each chapter. If the `identifier` part is provided, macro also associates `identifier` with the generated number and location of the object (figure, table) preceding the macro. This allows you to use the `identifier` with `@a` and `@r` macros.

This book uses one numbering group — `table`. It is used to auto-number [tables]Tables.

&lt;@r:example&gt;
Macro `&lt;​@N:table&gt;` would generate next table number.

I
: Include a file.
  Format: `&lt;​@I:file_name&gt;`

Includes the content of file `file_name`. The name of the file is specified relative to the folder containing the generated Leanpub manuscript. It is assumed that the file contains valid Markua format. No further post processing of the file contents is done in `scriv4lean`. File is included after all other work on the document preparation is done.

&lt;@r:example&gt;
This book includes its own To-Dos in the [front matter](#include_todo) with the help of macro `&lt;​@I:_todo.txt&gt;`.

</Text>
        </Document>
        <Document ID="2629918A-343D-46CE-951E-6582855528AF">
            <Title>Emphasis/Embolden not applied</Title>
            <Text>The following lines contain weird asterisks which do not appear in the book source:

Marking leading/trailing space with Emphasis or Embolden style.

Emboldened newline
X

The reason for them are incorrectly applied Emphasis and Embolden styles. Those styles should never start or end with a space (the first example line). They should also never be applied at the end of a line (the second example line) because Scrivener automatically applies the style to the line-terminating newline character. 

If such formatting has to be applied at the end of line, add a space at the end of line and **don’t** select it when applying formatting:

Correctly applied: Emphasis and Embolden 
(note the space at the end of the previous line)

Read more in Formatting.</Text>
        </Document>
        <Document ID="28623827-0EC0-417D-B317-B236AB4FFE11">
            <Title>multiParagraphTable</Title>
        </Document>
        <Document ID="28EB1256-49D6-4881-B5AE-90360D086215">
            <Title>Scrivener</Title>
            <Text>Scrivener is a text editor. It is also a lot more.

A beauty of Scrivener [Scrivener] is that it was written for authors by authors. Or at least by a bunch of people who deeply understand a creative process.

It has everything — a simple way to organize the book structure. Revisions. Cross-linking support. Internal organizer for research material. Internal image storage. Integration with thesaurus, dictionary, Wikipedia … Rich text formatting. Writing statistics. Export into multiple formats. And more and more and more.

There’s so much functionality built into Scrivener, that you should not just start using it. Watch the [video tutorials](https://www.literatureandlatte.com/learn-and-support/video-tutorials?os=macOS) first, or browse the [manual](https://www.literatureandlatte.com/learn-and-support/user-guides).

Scrivener can export the document into a Markdown dialect called MultiMarkdown. It is not compatible with either of Leanpub-approved input formats, but there’s where the scriv4lean converter comes into play.</Text>
        </Document>
        <Document ID="2D8C30F0-8D25-4C5E-B522-670620775E60">
            <Title>Line breaks and spaces</Title>
            <Text>In Markua, rules for processing line breaks and spaces differ from standard Markdown behavior:

Single newline, followed by text, represents a forced line break in a single paragraph
Two or more newlines signify the end of the current paragraph
Spaces and tabs at the beginning of line are used to determine level of list nesting and for footnote/endnote formatting
Internal spaces are collapsed to one space, except at the end of sentences

For a full list of formatting rules, see the official [Markua documentation](https://leanpub.com/markua/read#whitespace).

</Text>
        </Document>
        <Document ID="2F724C79-BBDA-4057-A883-9310877FC916">
            <Title>My books</Title>
            <Text>{width: 25%}
￼
&lt;https://leanpub.com/omnithreadlibrary&gt;

{width: 25%}
￼
&lt;https://www.packtpub.com/application-development/delphi-high-performance&gt;

{width: 25%}
￼
&lt;https://www.packtpub.com/application-development/hands-design-patterns-delphi&gt;
</Text>
        </Document>
        <Document ID="2FB0145C-4210-4846-B26E-4EB3D5962E1D">
            <Title>editFormatMenu</Title>
        </Document>
        <Document ID="334E8387-919D-4D32-A64F-BC8B5DE1B94E">
            <Title>doNotInclude</Title>
        </Document>
        <Document ID="33F02C1A-EB60-4B63-990E-2FF2E0D7277D">
            <Title>git-preview</Title>
        </Document>
        <Document ID="3566E32A-1A3D-421D-B9DA-27E5C5AB8E2C">
            <Title>Document structure</Title>
            <Text>The Leanpub meta-markdown template and `scriv4lean` converter assume specific document structure you should adhere to in your book.

Each chapter should start with a Folder document. To split chapter into sections, add Text sub-documents to the chapter. 

If you would like to split a chapter or section into multiple sub-documents, add a Text sub-document and then change its type to Section (Text).

To add a new part to the book, add a folder and then change its type to Part.

If you use front matter and back matter, you’ll have to change section type for each folder added  to these two parts of the book. Each front matter chapter must use section type Front matter and each back matter chapter must use section type Back matter. In the main part of the book, folders are automatically assigned a Chapter section type.

Front matter and back matter are optional. Feel free to remove them from the template, or [exclude them from the export]Invisible text.

The following figure shows selection of documents forming this book together with their section types:

{width: 50%}
￼
Figure &lt;$n:figure&gt;: Document parts and corresponding section types

</Text>
        </Document>
        <Document ID="36364BBC-1F72-4688-9076-E9AB5AAAA80F">
            <Title>Code</Title>
            <Text>To insert a shorter segment of code, use the Code Span format: Global.ActiveWriter.WriteLine(line).

Alternatively, wrap the segment in backtick (`` ` ``) characters, as `shown here`, or in double backticks (``` `` ```) which allows you to use backticks ``in ` the ` segment``.

To insert a longer piece of code, format it with the Code Block style:

function TProcessor.Run: boolean;
var
  processor: State;
begin
  processor := State.BOF;
  while processor &lt;&gt; State.EOF do
    if not FProcessor[processor].Step(processor) then
      Exit(SetError(FProcessor[processor].ErrorMsg));
  Result := CheckReferences;
end;

Attributes can be specified on the first line of a code block. The following example uses the `{format: delphi}` attribute to specify the Delphi language:

{format: delphi}
function TProcessor.Run: boolean;
var
  processor: State;
begin
  processor := State.BOF;
  while processor &lt;&gt; State.EOF do
    if not FProcessor[processor].Step(processor) then
      Exit(SetError(FProcessor[processor].ErrorMsg));
  Result := CheckReferences;
end;

Leanpub uses Pygments formatter. For the list of supported languages see &lt;http://pygments.org/languages/&gt;.</Text>
        </Document>
        <Document ID="36B11AE6-2A73-4E5C-9BF1-0973F30B3253">
            <Title>ppotl</Title>
        </Document>
        <Document ID="3A077312-C6AC-40C0-937B-316ED8EF0BF9">
            <Title>Reference not found</Title>
            <Text>The most common reason for the following error (you would see a difference chapter title, not “Document structure”) is that you have inserted a cross-reference to a document into the book and then renamed or deleted that document.

{format: text}
“Reference not found: [​Document structure](​#Document_structure)”

</Text>
        </Document>
        <Document ID="428A8A0D-E248-4544-BB8D-E89B5AD704A5">
            <Title>Scrivener</Title>
        </Document>
        <Document ID="42B5A15C-AE77-40E1-8B73-EB98698A83D5">
            <Title>Sumatra PDF</Title>
            <Text>PDF/MOBI/EPUB viewer</Text>
        </Document>
        <Document ID="44E31277-76D9-4333-8339-882725D728EA">
            <Title>Release notes</Title>
            <Text>Version 0.1, initial release</Text>
        </Document>
        <Document ID="453D78A9-5C28-43C5-B459-67BA331BAF28">
            <Title>To do</Title>
            <Text>{#include_todo}

&lt;@I:_todo.txt&gt;

</Text>
        </Document>
        <Document ID="481B07AB-A1F0-4AFD-B8A3-CE25012B085B">
            <Title>Appendix &lt;$L&gt;: Additional tables of content</Title>
            <Text>{#appendix_autoNumbering}

This appendix explains how the `scriv4lean` can be used to generate additional tables of content — list of figures, list of tables, list of citations, and more.

Creating a list of figures and tables is simple. As described in chapters on Images and Tables, the important part is to mark captions with the Caption and Table Caption styles. After that you just have to create a one-line template which will be expanded into a full table of contents.

The “List of” template used in this book is `[**@Caption@**](#@Reference@)`.

`Scriv4lean` uses this line once for each figure or table captions in the book. For each caption it replaces the `@Caption@` with the title of the caption and `@Reference@` with a reference (anchor) to the caption. As they are wrapped in a Markua link format, this will generate a hyperlink to the figure or table. The `**` is just here to make the text bold.

You also have to tell the `scriv4lean` which part of the book represents the template. To create a list of figures, mark the template with the `[scriv4lean] List of Figures` style. To create a list of tables, mark the template with the `[scriv4lean] List of Tables` style.

&lt;@r:example&gt;
You can adjust the format of the table of contents to your liking. The following list of tables was created from template `*@Caption@*`.


*@Caption@*</Text>
        </Document>
        <Document ID="49BBF215-40E7-47B5-A6D0-DECD67DCAD47">
            <Title>Leanpub meta-markdown</Title>
            <Text>The Leanpub meta-markdown template contains everything you need to write a Leanpub book: customized styles, Leanpub meta-markdown export format and template document structure. 

The ‘scriv4lean’ project includes two template documents. Both contain same styles and export format; the difference lies in the template document structure.

Document LeanpubMetaMarkdownParts.scriv should be used when you are writing a complex book, separated in multiple parts. The second template LeanpubMetaMarkdown.scriv is designed for a simpler book, one that doesn’t use parts.

Both templates include multiple styles useful when writing a Leanpub book. Styles are explained along the way in this part of the book. A complete overview of Leanpub meta-markdown styles is given in &lt;@A:appendix_LeanpubMMD&gt;.

When exporting book for Leanpub, set Compile For to MultiMarkdown and select the Leanpub meta-markdown format as shown here:

{width: 75%}
￼
Figure &lt;$n:figure&gt;: Exporting for Leanpub

If you change export settings, make sure that Convert rich text to MultiMarkdown is not checked. If you use lists and tables, make sure that Convert tables and lists to MultiMarkdown is checked.</Text>
        </Document>
        <Document ID="49FA0306-4E0C-4B1B-A15A-64C8009F097F">
            <Title>Two-part quote</Title>
            <Text>If an aside/blurb/quoted text/code block or any other quoted text splits in two parts, as shown below, you have a newline marked in a wrong style (or without a style) in the middle of the block.
Vs.
Aside
… and something

Paragraph 2

The previous example contains one empty line in No Style. Change it to Aside and the output is fixed.

Aside
… and something

Paragraph 2

</Text>
        </Document>
        <Document ID="4B9A4E3A-2424-41DF-BBEC-22FF79E4A04C">
            <Title>Folder structure</Title>
            <Text>Write this after putting the book on GitHub 

Leanpub\manuscript
LeanpubWithScrivener.mmd
LeanpubWithScrivener.scriv
(.bib ?)</Text>
        </Document>
        <Document ID="4C5AC3E8-62F2-4595-96D0-C555EA340F8E">
            <Title>delphiHighPerformance</Title>
        </Document>
        <Document ID="4D5E2B2F-C8EF-4E86-8587-4BCE16986AF9">
            <Title>list-number</Title>
        </Document>
        <Document ID="4F2BC4C8-394D-4E18-97F4-34409FB4D291">
            <Title>scriv4lean</Title>
            <Text>The conversion tool which binds Scrivener and Leanpub is called `scriv4lean`. It is a simple command-line too which takes Scrivener’s MultiMarkdown sourceThis MultiMarkdown has to be created by using the Leanpub meta-markdown export format. and converts it into Leanpub’s Markua.

How do you send the resulting Markua to Leanpub is up to you (and depends on the book writing option configured on the Leanpub site). I am pushing changes to githubRead more about my workflow in &lt;@A:appendix_myWorkflow&gt;. and Leanpub picks up from there, but you can use any Leanpub-supported approach.

The use of the `scriv4lean` tool is described in [&lt;@R:appendix_scriv4lean&gt;](#appendix_scriv4lean).

</Text>
        </Document>
        <Document ID="50E1E6F9-E8C7-4B07-AAAF-DED5BB1FFB7B">
            <Title>addingStyles</Title>
        </Document>
        <Document ID="53DB391F-498E-4DD8-A868-0F3A790E85DB">
            <Title>List of figures</Title>
            <Text>{#listOfFigures}

[**@Caption@**](#@Reference@)
</Text>
        </Document>
        <Document ID="56E79F7E-49E0-4183-84CE-D8CD3882E7E4">
            <Title>Introduction</Title>
        </Document>
        <Document ID="5990DE5E-9801-4915-93CE-E3175710250C">
            <Title>Suggestions and bugs</Title>
            <Text>{#appendix_bugs}

Issue tracker on github
Suggestions welcome!
Testers welcome!
</Text>
        </Document>
        <Document ID="59E42147-3F8A-4DBF-A5FD-7BA30E23E1A4">
            <Title>Appendix &lt;$L&gt;: My workflow</Title>
            <Text>{#appendix_myWorkflow}

It took me some time to put together a setup where I can focus mostly on writing and not on all related housekeeping tasks. I’m publishing it here in hope that it might give you ideas and inspiration.

My books are configured (on Leanpub [Leanpub]) to take data from a github repository. The repository uses `preview` and `publish` branches and Leanpub is configured to automatically generate a preview each time I push to the `preview` branch. Leanpub is configured to push generated books to Dropbox.

Scrivener [Scrivener] for editing. What else. I check my style and grammar with ProWritingAid [ProWritingAid], which knows how to read Scrivener files.

Scriv4lean running in background with the help of the `pushpreview` [script](#appendix_myWorkflow_scripts) which automatically runs `scriv4lean` each time the book is exported from Scrivener and pushes changes to github if there were no compilation errors.

SumatraPDF [SumatraPDF] for previewing the generated PDF file. SumatraPDF fits this role well as it doesn’t keep the file lock and Dropbox can update to the new version of the PDF even when I’m vieweing it. It will also automatically reload the file whenever it is changed on the Dropbox. I use Microsoft Edge to preview EPUB format and Calibre [Calibre] to preview MOBI format.

I’m using two virtual desktops with `scriv4lean` and SumatraPDF running on the secondary desktop. That way I can quickly switch from the editor to the preview and back.

My books include empty chapter named `Front matter: &lt;​​$year&gt;-&lt;​​$numericalmonth&gt;-&lt;​​$day&gt;T&lt;​​$time&gt;`. Placeholders in the title are converted into current date/time during export from Scrivener. This helps me determine if I’m looking at the old or new version of the PDF file in the viewer. To make a published book, I manually exclude this chapter from the export.

To maintain bibliography, I’m using Mendeley [Mendeley]. I create one folder for each book and collect book bibliography in that folder. The Mendeley Desktop program can be set to automatically export each folder into separate `.bib` file. The `pushpreview` script is configured to use appropriate `.bib` file.

GitKraken [GitKraken] helps me manage git repositories. 
</Text>
        </Document>
        <Document ID="5A6DE38A-59F1-4E3E-B011-5A08428FD9E7">
            <Title>Scripts</Title>
            <Text>{#appendix_myWorkflow_scripts}

I’m running **`pushpreview.bat`** in a background when I work on a book. It runs the `scriv4lean` processor with the `/wait` switch. `Scriv4lean` waits until a new version of MultiMarkdown book is exported, converts it and exits. `Pushpreview` then checks the error level. If it is greater than 0 (meaning an error), the script simply starts `scriv4lean` again. Otherwise it pushes all modfied files to the `preview` branch of the repository and restarts the `scriv4lean` processor.

@echo off

	h:
	cd &quot;\pisanje\knjige\Writing your next Leanpub bestseller with Scrivener\Leanpub&quot;

:wait
    echo.
	..\ScrivenerToLeanpub\Win32\Debug\scriv4lean /wait /numbercitations ..\LeanpubWithScrivener.mmd\LeanpubWithScrivener.mmd .\manuscript bibliography\scriv4lean.bib
    echo.
	if errorlevel 1 goto wait
	echo.

	git checkout preview
	git commit -a -m &quot;scriv4lean preview&quot;
	git push
	goto wait
Script &lt;$n:script&gt; : `pushpreview.bat` compiles the book on each change and commits changes to the repository

This script does not add or remove files from the git repository. You have to do it manually. You’ll have to add appropriate files on the first run and then each time you add new images to the book.

As you can see in the [next section](appendix_gitWorkflow), this approach in a bunch of commits called “scriv4lean preview”. This is not useful so occasionally (when I finish working on some topic and move to another) I run the **`squashRemotePreview.bat`** script which squashes multiple commits together and gives them a more appropriate commit message.

@echo off

	set /p num=Number of commits to squash:
	if %num%.==. goto exit

	set /p msg=Commit message:
	if &quot;%msg%&quot;.==&quot;.&quot; goto exit

	git reset --soft HEAD~%num%
	git commit -m &quot;%msg%&quot;
	git push origin +preview

:exit
Script &lt;$n:script&gt; : `squashRemovePreview.bat` squashes multiple commits together

The script, based on [GitSquash] asks for the number of commits to squash together and the new commit message and then does its job. Its effects can be seen in the following section.

</Text>
        </Document>
        <Document ID="5AA2685B-6C83-4737-84B5-AA082FC18A6E">
            <Title>Bibliography</Title>
            <Text>{#appendix_autoNumbering_bibliography}

In a general terms, creating a bibliography for a book is similar to creating a list of figures or tables. You create a template, mark it with the [scriv4lean] Bibliography style and you’re done. The difference, however, is that in this case the template is more complicated.

Each entry in a BibTeX file has a specific type. The following excerpt from the `scriv4lean.bib` bibliography file for this book shows two entries — a web site (`@misc`) describing the BibTeX format and a book (@book) about the Markua.


{format: text, line-numbers: false}
@misc{BibtexFormat,
author = {Feder, Alexander},
title = {{BibTeX Format Description}},
url = {http://www.bibtex.org/Format/},
urldate = {2019-05-26},
year = {2006}
}
@book{Armstrong2019a,
author = {Armstrong, Peter},
publisher = {LeanPub},
title = {{The Markua Manual}},
url = {https://leanpub.com/markua},
year = {2019}
}

When you write a bibliography template, you have to create separate template for each type you are using. This book cites only other books and web sites so I only had to create templates for the `book` and `misc` types, as shown here:

{format: text, line-numbers: false}
book=**@citationKey@**
: @author@, @year@, *@title@*. [@publisher@. ][Available at &lt;@url@&gt;.]
.
misc=**@citationKey@**
: *@title@*, &lt;@url@&gt; (Accessed: @urldate@).
.

Each entry starts with an introductory `type=` (`book=`, and `misc=`). The template then continues with a mix of fields (`@author@`, `@year@`, `@title@` …) and Markua formatting. Fields are replaced with the corresponding field values from the BibTeX file. The @citationKey@ is replaced with the entry’s citation key (`BibtexFormat` in the first example and `Armstrong2019a` in the second example above).

Definitions for different type follow each other. A line with just a dot in it is changed into an empty line on export.</Text>
        </Document>
        <Document ID="5C3D35FC-635A-4CAB-91C1-6E7079150797">
            <Title>Appendix &lt;$L&gt;: Using scriv4lean</Title>
            <Text>{#appendix_scriv4lean}

`Scriv4lean` is a command-line utility which takes MultiMarkdown file, exported from Scrivener [Scrivener], and converts it into Leanpub [Leanpub],[Armstrong2019] Markua [Armstrong2019a] format.

It can be invoked in two basic forms: Somehow, console block is not correctly exported here and I don’t know why. 

Scriv4lean scrivener.mmd manuscript_folder
Scriv4lean scrivener.mmd manuscript_folder bibliography.bib

The first form converts MultiMarkdown file `scrivener.mmd` and creates Leanpub output files (`book.txt`, converted manuscript and image files) in the `manuscript_folder`.

The second form also includes a bibliography file in BibTeX format [BibTeX]. This allows you to use [citation]Citations and [bibliography](#appendix_autoNumbering_bibliography) functionality.

Following optional command-line parameters are supported:

/wait or -wait
: Starts the converter, waits for the `scrivener.mmd` to be modified, generate the output and exit.

**/server** or **-server**
: Starts the converter and generates output each time `scrivener.mmd` file is modified. 
  Program can be terminated with Ctrl+C or by closing the console window.

**/nocleanup** or **-nocleanup**
: Prevents `scriv4lean` from removing image files from the folder containing `scrivener.mmd`.
  By default `scriv4lean` cleans up folder with the exported MultiMarkdown file leaving only the `.mmd` file. By using this switch, this behavior is disabled.

**/numbercitations** or **-numbercitations**
: Renumbers [citations keys]Citations in the order they are used in the book.


For a practical example, see &lt;@R:appendix_myWorkflow&gt;, &lt;@A:appendix_myWorkflow_scripts&gt;

Add a switch that will check URLs in Bio. 
</Text>
        </Document>
        <Document ID="61DF8E82-A7F5-493B-8A5C-2CF1AD850B92">
            <Title>List of scripts</Title>
            <Text>{#listOfScripts}

[@Caption@](#@Reference@)</Text>
        </Document>
        <Document ID="65E72A4A-C7E1-4C75-B552-7A1E284F2646">
            <Title>Mendeley</Title>
            <Text>Citation manager
Browser extension, desktop app
Manually editing Citation Key
All biblio for one book is in a folder
Auto-export to .bib
Copy citation keys directly from MendeleyDesktop</Text>
        </Document>
        <Document ID="68DA48D9-3945-43A0-8D29-03C32400A662">
            <Title>outlineTemplate</Title>
        </Document>
        <Document ID="693D5CDE-6EFC-40DE-8AAF-06C50A3C262B">
            <Title>list-roman</Title>
        </Document>
        <Document ID="6C19CE7E-5A2E-4BB0-81C9-0F0B6820C504">
            <Title>Invisible text</Title>
            <Text>When you need to enter some notes in your document, but don’t want them to appear in the book, `scriv4lean` offers few different solutions.

On the purely Scrivener side, you can uncheck the Include in Compile property of a document. This will prevent it from being exported. You can also uncheck the Include checkbox in the export dialog.

￼
Figure &lt;$n:figure&gt;: Two ways of preventing a document from being exported

The Leanpub meta-markdown template simplifies this by introducing the Outline template. This is a normal Text document with Include in Compile unchecked. Right-click on a document in the Binder and select Add, New From Template, outline to add such a document to the book.
￼
Figure &lt;$n:figure&gt;: Adding an *Outline* document to the Binder

When you want to “deactivate” a shorter part of your text, mark it as an Annotation. Select the text is to be excluded and click Insert, Inline Annotation. An annotation is hidden here. An annotation was placed just before this statement in the Scrivener source, but it is not visible in the book.

To select a longer part of a text, format it with the Comment style. A comment always spans one or more paragraphs. You cannot use it to comment-out just a part of a paragraph.

This is a comment.

A comment was placed just before this paragraph in the Scrivener source, but it is not visible in the book.

You can also put a `%%` sequence at the start of each line you want to comment out. `%%` indicates a Markua comment.

The last option for excluding parts of a book, to-dos, is described in the next section.
</Text>
        </Document>
        <Document ID="78A0567F-5310-49A0-94B1-61AE26C8EC84">
            <Title>Writing for Leanpub</Title>
        </Document>
        <Document ID="78A974FE-4871-4D7D-8A4B-F945CCF9D651">
            <Title>To-Dos</Title>
            <Text>The ‘scriv4lean‘ processor removes each part of text formatted with the TODO style from the book and writes it into file _todo.txt. This file is created in the same folder as the resulting Leanpub manuscript.

TODOs are collected into file _todo.txt and removed from the book. 

Each to-do is introduced with a document path leading to the document with the to-do. This allows you to find the to-do in a potentially huge book.

A to-do cannot span multiple paragraphs.

&lt;@r:example&gt;
Following lines show a partial to-do file for this book.

`\Introduction\scriv4lean`
`Add a switch that will check URLs in Bio.`

`\Writing for Leanpub\Invisible text\To-Dos`
`TODOs are collected into file _todo.txt and removed from the book.`

You can use the `@I` [macro](#appendix_macros) to include current to-do list in the book itself. The list is included as a last step in the conversion so it will always contain the current state of the to-dos from the book. This book includes to-dos in the [To do](#include_todo) chapter. 
</Text>
        </Document>
        <Document ID="7B003BE6-0126-49E4-B3AD-D9605A1B3036">
            <Title>exportMultiMarkdown</Title>
        </Document>
        <Document ID="7E796D90-17C0-4496-8092-275A827FDBF7">
            <Title>Appendix &lt;$L&gt;: Common problems</Title>
            <Text>{#appendix_commonProblems}

This appendix lists some common problems that can encounter during the book conversion.
</Text>
        </Document>
        <Document ID="83715000-63E7-4D74-9E4A-5CD07B481FF4">
            <Title>Sections</Title>
            <Text>{#appendix_sections}
Following sections types are used in Leanpub multi-markdown template and are supported in the `scriv4lean` converter.

Part
: Starts a new part of a book. Parts are optional — most of the books don’t use them.

Chapter
: Starts a new chapter.

Section (header + text)
: Starts a new section. Sections are part of a chapter and can be numbered or not, depending on Leanpub book settings.

Section (text)
: Continues current chapter or section.

Outline
: Contains text that is not exported to the book.

Front matter
: Starts a new chapter (preface, acknowledgments, …) in the front matter part of the book.

Back matter
: Starts a new chapter (appendix, list of figures, …) in the back matter part of the book.

</Text>
        </Document>
        <Document ID="86B7B882-2487-4AB1-8D68-65DE1E996102">
            <Title>outline</Title>
            <Synopsis>&quot;Outline&quot; section is not included in compile by default and is associated with an &quot;outline&quot; icon.</Synopsis>
        </Document>
        <Document ID="889323F8-5CC6-4BD4-B0A3-8173ECA6A07E">
            <Title>Figures and tables</Title>
            <Text>If you number figures and tables with either `@n` or `@N` [macros](#appendix_macros), `scriv4lean` provides a way to refer to them by the name.

For example, the Tables chapter creates caption number for the first table with the `&lt;​@N:table=table3by2&gt;` macro. It generates next number from the `table` range and names it `table3by2`. 

You can use the `@r` macro to insert the number associated with the `table3by2` name. `&lt;​@r:table3by2&gt;` expands to “&lt;@r:table3by2&gt;”.

The `@A` macro is replaced with the hyperlink to the table. Hyperlink text is set to the table number. `&lt;​@A:table3by2&gt;` expands to “&lt;@A:table3by2&gt;”.

You can use the `@a` macro to generate an anchor, associated with a name. This allows you to create a hyperlink with a custom name. `[First table](&lt;​@a:table3by2&gt;)` expands to “[First table](&lt;@a:table3by2&gt;)”.
</Text>
        </Document>
        <Document ID="8CE0D688-27B1-4748-8C38-A375862FCAD7">
            <Title>footnoteBookSettings</Title>
        </Document>
        <Document ID="8DA2DCD2-08E7-45FC-84EF-831A5D93BDFC">
            <Title>Bibliography</Title>
            <Text>book=**@citationKey@**
: @author@, @year@, *@title@*. [@publisher@. ][Available at &lt;@url@&gt;.]
.
misc=**@citationKey@**
: *@title@*, &lt;@url@&gt; (Accessed: @urldate@).
.
</Text>
        </Document>
        <Document ID="8DE153C1-1851-420E-A720-1551C1B9BC48">
            <Title>Git workflow</Title>
            <Text>{#appendix_gitWorkflow}

I commit mostly to the `preview` branch (or, rather, my `pushpreview` script does that for me). This results in a bunch of small commits, all alike:
{width: 66%}
￼
Figure &lt;$n:figure&gt;: Pushing to `preview` branch

When I finish working on a topic, I use the `squashRemotePreview.bat` which merges commits. In the following example I have merged last 6 commits into a new commit and changed commit message to “Appendix: Using scriv4lean”.

Number of commits to squash:6
Commit message:Appendix: Using scriv4lean


This results in a cleaner commit log:
{width: 66%}
￼
Figure &lt;$n:figure&gt;: Squashing `preview` commits

From time to time I merge commits back into `master` branch:
{width: 66%}
￼
Figure &lt;$n:figure&gt;: Merging into `master` branch

When I want to publish new version of the book, I merge `master` branch into `publish` branch.
Add a picture re: merging into publish. 
</Text>
        </Document>
        <Document ID="902B7E44-0E3F-42E5-9197-12329128DC94">
            <Title>Expected Chapter heading, got XXX</Title>
            <Text>The main reason for the following error (you would see a different chapter title, not “List of scripts”) is that you did not mark the folder as a Front matter or Back matter.

Expected Chapter heading, got:  List of scripts  [line #1308]

Read more in &lt;@R:appendix_LeanpubMMD&gt;, &lt;@A:appendix_sections&gt;.
</Text>
        </Document>
        <Document ID="91ABC626-A43D-4E40-A54F-419ABC5689E8">
            <Title>Preface</Title>
            <Text>This is a book for authors.

More specifically, this is a book for authors that would like to publish a book on the Leanpub self-publishing site but don’t want to write the book in a text editor.

There are such people out there. I know, because I’m one of them.

I have published my first book on Leanpub and it was a great experience. Almost all aspects of the creation process  — I even enjoyed writing in a text editor — was fitting me well. Almost all, except that I was terribly missing some better tooling. I wanted to move the parts of my book around (doable with plenty of small files, but cumbersome), hunting for anchors to existing chapters and sections was a pain, and I deeply missed better tools for numbering the figures, creating a list of figures and so on.

I have almost started writing my own set of add-ons for PSPad (great text editor, much recommended!) when I learned about Scrivener. Read some documentation, watched the instructional videos, and I was hooked.

Scrivener can export to many formats, but Leanpub’s variation of Markdown is not one of them. It does, however, export to a different dialect, MultiMarkdown. Conversion between them should be simple, I’m a programmer and so I wrote the converter. And a book about it. The book you are just reading.

Both the Leanpub and Scrivener have given so much to me, I want to give something back and what better than the actual tooling that allows them to work together. This book (including its Scrivener source), templates and all the tooling are released under an open source license and you can use them with no strings attached.
</Text>
        </Document>
        <Document ID="924DB37A-C894-4BA1-ADA1-F60B78362079">
            <Title>Formatting</Title>
            <Text>To create *italic text*, wrap it in `*`asterisks`*` or format it with the emphasis style.
To create **bold text**, wrap it in `**`double asterisks`**` or format it with the embolden style.

Italic, bold, and underlined formatting is currently not supported.Rich text formatting is exported to MultiMarkdown if *Convert rich text to Markdown* option is checked in the export, but that breaks the MultiMarkdown file in current Windows beta. 

Only works when “Convert rich text to Markdown” is checked (default). (Sadly, that breaks the MultiMarkdown file in current beta.)
This text is set to italic format.
This text is set to bold format.
This text is set to underlined format. 

To write a mathematical expression in LaTeX format, mark it with the Math style: \int_{a}^{b} x^2 dx.</Text>
        </Document>
        <Document ID="9FEDFA6D-EA87-4102-8E1D-DDF70134A138">
            <Title>Quotes</Title>
            <Text>When it comes to quoting larger block of text, you have several options to choose from.

Lines of text formatted with the Block Quote style will be converted to a `{blockquote}`:

Block quote
… second line

Second paragraph.

To quote larger blocks of text, use the Aside format. Such block will be converted to an `{aside}`:
Aside
… second line

Second paragraph.

The Blurb format is used for shorter blocks of text. Such block will be converted to a `{blurb}`:

Blurb
… second line

Second paragraph.

You can provide attributes on the first line of a blurb. The following example uses `{class: center}` to center a blurb. This also hides the blurb icon.
{class: center}
Centered blurb.

Alternatively, use the Centered Text format to create a centered blurb:

This is a centered text.

Other `class` attribute values (each maps to a different icon) are: `discussion`, `error`, `information`, `question`, `tip`, `warning`, and `exercise`.

Leanpub supports changing the blurb icon to any icon from the Font Awesome project [FontAwesome]. At the moment the book was written, icons from Font Awesome version 5.4.1 were supported. 
	
The following example uses the [cat](https://fontawesome.com/icons/cat?style=solid) icon:
{icon: cat}
Only the free icons are supported. If you are selecting icons on the [Font Awesome site](https://fontawesome.com/icons?d=gallery&amp;s=solid&amp;m=free), make sure to tick both Free and Solid checkboxes because these are the only icons you can use.

Large blocks of text can be also formatted as a Code Block with attribute `format` set to `text` or `console`. You may wish to also disable line numbers by specifying `line-numbers: false`.

The following quote is formatted as Code Block with attributes set to `{format: text, line-numbers: false}`:

{format: text, line-numbers: false}
git checkout preview
git commit -a -m &quot;scriv4lean preview&quot;
git push

Alternatively, format the block with the Text block format:

Two lines
In “text block” style

{#console-format} Used in “Chapters and sections” as a demo. 
The following quote is formatted as Code Block with attributes set to `{format: console, line-numbers: false}`:

{format: console, line-numbers: false}
git checkout preview
git commit -a -m &quot;scriv4lean preview&quot;
git push

Alternatively, format the block with the Console block format:

Two lines
In “console block” style

The last option is to use the Poetry style:
With Poetry style
                   a text can flow
       Freely

&lt;@r:tip&gt;
Leave an empty line before and after each quote (regardless of the method used). Otherwise the result may be formatted incorrectly.
</Text>
        </Document>
        <Document ID="A28842AB-D840-46A4-AC5E-02D3CE08DF7C">
            <Title>Images</Title>
        </Document>
        <Document ID="A98F9A08-E1E1-4829-977E-6760CE39E036">
            <Title>Leanpub meta-markdown</Title>
            <Text>A Leanpub book written in Scrivener should always start its life as a Leanpub meta-markdown template. This template, documented in chapter Leanpub meta-markdown and in &lt;@A:appendix_LeanpubMMD&gt; wraps together special styles, designed for writing a Leanpub book, and an export format which customizes Scrivener’s MultiMarkdown export.

If you have already started writing a book in Scrivener, but would like to publish it on Leanpub, you’ll have to import styles and export formats from the Leanpub meta-markdown template file. Otherwise, you can just start your book based on that template.</Text>
        </Document>
        <Document ID="AC240D37-5268-4A1A-9555-FEC80297D278">
            <Title>Styles</Title>
            <Text>Following styles are used in Leanpub multi-markdown template and are supported in the `scriv4lean` converter.

Aside
: Marks text as an [aside]Quotes. Asides are used to insert short or long notes that are tangential to the main idea. 

Block Quote
: Marks text as a [block quote]Quotes. It is used to insert quotations.

Blurb
: Marks text as a [blurb]Quotes. Blurbs are similar to asides, but shorter. They can display an icon.

Caption
: Marks text that describes the [image]Images positioned above the caption.

Centered Text
: Marks a [centered blurb]Quotes.

Code Block
: Marks a longer block of [code]Code.

Code Span
: Marks a shorter (inline) span of [code]Code.

Comment
: Marks a [comment]Invisible text. Comments are included in the exported MultiMarkdown, but will not appear in the book.

Console Block
: Marks a quoted [console block]Quotes.

Embolden
: Marks a [bold]Formatting text. It should never be used at the very end of a paragraph because Scrivener exports it in a weird way which breaks the book processing. Always leave at least a non-emboldened space at the end of paragraph.
  Embolden formatting should also always start and end with a non-whitespace character. (The first and last character in marked text should not be space or tabulator.) In critical situations it is safer to use `**` to make bold text.

Emphasis
: Marks an [italic]Formatting text. It should never be used at the very end of a paragraph because Scrivener exports it in a weird way which breaks the book processing. Always leave at least a non-emboldened space at the end of paragraph.
    Emphasis formatting should also always start and end with a non-whitespace character. (The first and last character in marked text should not be space or tabulator.) In critical situations it is safer to use `*` to make italic text.

Endnote
: Inserts and [endnote]Footnotes and endnotes.

Footnote
: Inserts a [footnote]Footnotes and endnotes.

Math
: Inserts a [mathematical]Formatting expression, written in LaTeX.

Poetry
: Inserts a [poetry]Quotes block.

Table Caption
: Marks a text that describes the [table]Tables positioned above the caption.

Text Block
: Marks a quoted [text block]Quotes.

TODO
: Marks a [to-do]To-Dos. To-dos are extraced from the book and collected in the _todo.txt file.

[scriv4lean] Bibliography
: Marks a [template](appendix_autoNumbering_bibliography) that generates a list of cited works.

[scriv4lean] List of Figures
: Marks a [template](appendix_autoNumbering) that generates a list of figures.

[scriv4lean] List of Tables
: Marks a [template](appendix_autoNumbering) that generates a list of tables.

</Text>
        </Document>
        <Document ID="B9439510-B6F5-49ED-80E3-860754E29933">
            <Title>Creating new project</Title>
            <Text>?
Create from template?
Import template formats?
Must test!
</Text>
        </Document>
        <Document ID="B957704E-73D7-4D95-880D-9C5E441DD4AB">
            <Title>Templates</Title>
        </Document>
        <Document ID="B9C03563-6470-4656-89EE-33827DEFBA5B">
            <Title>leanpub_tachometer-alt</Title>
        </Document>
        <Document ID="BA74C25E-EAC0-4655-99B3-78014E95F265">
            <Title>Appendix &lt;$L&gt;: Download</Title>
            <Text>… needs better title
- description of the GitHub repo
</Text>
        </Document>
        <Document ID="BABFBE65-C0E5-4337-B50D-2CEB4B32E7E7">
            <Title>Back matter</Title>
        </Document>
        <Document ID="BB046A18-C26A-426D-8F37-B74A7D7F3655">
            <Title>Cross-references</Title>
            <Text>Scrivener makes is simple to insert links to any chapter or section in the book at any place, but fails at advanced functions — customizing text for such links, linking to front matter and back matter (preface and appendices), referring to figures and tables, and more. `Scriv4lean` enhances this support and fills in missing pieces

</Text>
        </Document>
        <Document ID="BB2A081E-236B-43EB-A3DE-801EDC9E9363">
            <Title>linkToDocument</Title>
        </Document>
        <Document ID="BBC7A12A-8D72-487A-AB93-65230D60850B">
            <Title>Front matter</Title>
        </Document>
        <Document ID="BE3A4A6E-864C-4BA8-BE5B-899372E2E1B2">
            <Title>&lt;&lt;meta&gt;&gt;</Title>
            <Text>&lt;@d:tip={icon: lightbulb}&gt;
&lt;@d:example={icon: eye}&gt;
</Text>
        </Document>
        <Document ID="BEC3DF39-7AB6-484A-AE12-0B4368FFEF8C">
            <Title>List of tables</Title>
            <Text>{#listOfTables}

[@Caption@](#@Reference@)
</Text>
        </Document>
        <Document ID="BF52C69D-4268-4457-AA0C-06D8CFAF0DFC">
            <Title>designPatternsDelphi</Title>
        </Document>
        <Document ID="C0705364-CB4F-4AA9-9114-CFC5F9069C40">
            <Title>Extras</Title>
        </Document>
        <Document ID="C12B73FA-79EA-42B8-A2C1-622A1ACAF1F3">
            <Title>Lists</Title>
            <Text>Simple lists can be written directly in Scrivener.

{float: right}
￼
As an example, the following list was formatted in Scrivener as a “bullet” list:

Item 1
Item 2
Item 3

&lt;@d:ChLists=_chapter&gt; Used for example in appendix on macros 
&lt;@r:tip&gt;
Make sure that one empty paragraph divides preceeding text from a list. Otherwise a list may get exported incorrectly.See [&lt;@R:appendix_commonProblems&gt;](#appendix_commonProblems) for an example. 

{float: right}
￼
Similarly, a flat numbered list can be written as a “numbered” Scrivener list:

Item 1
Item 2
Item 3

{float: right}
￼
Other kinds of lists are not supported by the Scrivener/’scriv4lean’ combination. You should write them directly in Markua. As an example, following list was formatted in Scrivener to use Roman numerals. You can see it is not exported correctly:

Item 1
Item 2
Item 3

To get a desired result, write it as a normal Markua list (each line starts with ‘i.’):

i. Item 1
i. Item 2
i. Item 3

Next example shows a nested list, written in Markua. Each level is indented with a ‘Tab’ character:

1. Item 1
	a) Item 1.1
	b) Item 1.2
2. Item 2
	a) Item 2.1
		* Item 2.1.1
		* Item 2.1.2

More information on formatting lists in Markua can be found in the [Markua manual](https://leanpub.com/markua/read#lists).
</Text>
        </Document>
        <Document ID="C4FD4BFF-6EDD-45EA-A9B8-0BDB6DE51E55">
            <Title>tomnimrew-accvio</Title>
        </Document>
        <Document ID="C85DD395-4E30-4546-A339-D1AF3B580478">
            <Title>editFormatMenu</Title>
        </Document>
        <Document ID="D061A14A-6C68-44A2-B2AF-F89B4B2F0E0A">
            <Title>Conventions</Title>
            <Text>Conventions used in this book

Icon: lightbulb

Icon: eye
</Text>
        </Document>
        <Document ID="D17B48FE-282E-44B1-BAC9-9111A4630359">
            <Title>Citations</Title>
            <Text>`Scriv4lean` converter can work with an external bibliography file in BibTeX format [BibtexFormat], create a list of cited works and provides two ways for formatting citation keys.

To use the citations functionality, you have to pass a name of an external bibliography (.bib) file on the [command line](#appendix_scriv4lean). BibTeX parser is quite primitive. If you run into a situation where `scriv4lean` can’t correctly interpret your bibliography file, create a [bug report](#appendix_bugs).

Whenever you need to cite an external work, include its citation key in square brackets as in the following example:

… the Markua format [​Armstrong2019a] …

`Scriv4lean` will record the citation and use the cited work when generating the bibliography for the book.&lt;@R:appendix_autoNumbering&gt;, &lt;@A:appendix_autoNumbering_bibliography&gt; explains the bibliography generation process.  The citation key will also be converted into a hyperlink pointing to the corresponding bibliography entry.

`Scriv4lean` can optionally change the citation key to a numbered format. If you use the `/numbercitations` command-line switch, citation keys will be converted to a numbered format and `[​Armstrong2019a]` will (for example) change to `[5]`. Citations are numbered in the order of appearance (first citation is converted to `[1]`) and the same order is used when generating the bibliography.This book uses the numbered citation format. </Text>
        </Document>
        <Document ID="D7C5F0A1-2028-448A-8D53-B8F203FB4103">
            <Title>Acknowledgements</Title>
            <Text>This book would not be here without the great people who created Leanpub publishing platform [Leanpub] and another group of great people who are developing Scrivener [Scrivener]. Great thanks to all of you!

The `scriv4lean` utility is written in Delphi [EmbarcaderoDelphi], a wonderful development tool which I’ve been using for many decades now.

Another indispensable tool used during the development is RegexBuddy [RegexBuddy], a regular expression editor and debugger.
</Text>
        </Document>
        <Document ID="DB090B03-AF41-4606-8DD9-1C86B7F1DE39">
            <Title>Footnotes and endnotes</Title>
            <Text>You can use Scrivener’s Inline footnote feature to convert a part of text into a footnote. Select the text forming the footnote and click Insert, Inline Footnote.“Normal” Scrivener footnotes (*Insert, Footnote*) are not exported to MultiMarkdown. 

Re-check normal footnotes when Scrivener is released. 
 
Another way to write a footnote is to mark the text of the footnote with the Foonote style. This allows you to write a multi-paragraph footnote.Write the first paragraph of the footnote, end it with a newline and then start the second footnote paragraph with a tab.
	There should be no empty lines in a footnote. 

In the same way you can create an endnote --  a footnote that is inserted at the end of the current chapter or at the end of the book, depending on the book generation settings on the Leanpub site. To create an endnote, format the text with the Endnote style.

Footnote and endnote generation requires the `As footnotes when inserted with ^, and as endnotes when inserted with ^^` option to be set in Leanpub book generation settings.As the chapters in this book are quite short, endnotes are configured to appear at the end of the book. 

￼
Figure &lt;$n:figure&gt;: Footnote and endnote book generation settings
</Text>
        </Document>
        <Document ID="DF004E82-9313-486D-86E1-53AEA952D0EB">
            <Title>Markua</Title>
            <Text>Leanpub books are written either in a special “Leanpub” dialect of Markdown format, or in their own Markua format  [Armstrong2019a].

Markua is very similar to Markdown (we could call it its cousin), but was designed from scratch as a book-writing tool, while the Markdown was designed more as a web page writing tool.

The tooling described in this book supports only the Markua language. Make sure that you have selected the appropriate option while creating your Leanpub book.</Text>
        </Document>
        <Document ID="E26B9A8E-F834-4B42-9E21-254CED00978B">
            <Title>Leanpub</Title>
            <Text>The Leanpub self-publishing service [Leanpub] allows everyone to publish a book. It is a great solution for self-published authors and I am using it from my first book. There, actually, would not be my first book, if there was no Leanpub, as the very existence of the site kicked my sorry bottom into action.Leanpub’s motto is “Publish Early, Publish Often” and this “continuous delivery” approach suited my (bad) writing habits perfectly. I could get feedback from early readers, the book generated some income since the very beginning and readers were nagging me when I went into a dormant mode for (too many) months from time to time.

Leanpub only creates electronic books. It will convert your masterpiece into PDF, MOBI, and EPUB format, which covers all bases. It can also prepare a special print-ready PDF which you can take to an on-demand book printing service.

The beauty of Leanpub is that it is entirely automated. You push a book to githubThere are other options available., automated service converts your writing into all output formats and drops the result in a shared Dropbox folder. They are created for your eyes only, but whenever you fell it, you can click the Publish button and a book (or just a part of it) is released to your readers.

Read more about Leanpub in [Armstrong] or just browse their web site.</Text>
        </Document>
        <Document ID="E26F402C-D482-44D8-AB28-4B3C90CBAE0F">
            <Title>Git workflow</Title>
        </Document>
        <Document ID="E3FAE5A9-B9EB-477C-A768-FF3DC3611710">
            <Title>git-master</Title>
        </Document>
        <Document ID="F1952F0B-5098-4CD0-AD3C-A0B9383489E8">
            <Title>insertLinkedImage</Title>
        </Document>
        <Document ID="F7CCB988-3FB2-4D9E-9CA5-4C9A5308807A">
            <Title>list-bullet</Title>
        </Document>
        <Document ID="FC11B24A-66D8-44A0-B7BD-7C91016232EC">
            <Title>Adding a new category</Title>
            <Text>It is possible to create “List of anything” with `scriv4lean`, but you’ll have to do some manual work. For example, this book contains a [List of scripts](#listOfScripts) which lists all scripts discussed in the book.

To create a new table of contents, you will need:

New caption style. (I used Script Caption.)
New table of contents style. (I used [scriv4lean] List of Scripts.)
A tag that will bind the two together. (I used `scripts`.)

Create the new caption style first. I marked a caption with the Caption style, clicked inside the marked text, selected Format, Style, New Style From Selection, and named the style Strict Caption.

Create the new template style next. I used a same process to turn [scriv4lean] List of Tables into [scriv4lean] List of Scripts.

{float: right, width:50%}
￼
Select File, Compile and click Edit Format which hides in a pop-up menu next to a “geared wheel” icon in the bottom left corner. 

Select the Styles settings. Click the + icon in the upper right corner and add new styles, one at a time.
{width: 80%}
￼
Figure &lt;$n:figures&gt;: Adding new “table of contents” styles

Select the new caption style (Script Caption). Enter `&lt;​$leanpub:caption:scripts&gt;` into the Prefix field. Enter `&lt;/​$leanpub:caption:scripts&gt;` into the suffix field.

The `$leanpub:caption:` part of the prefix/suffix is fixed and must not be changed. The `script` part I have chosen myself in step 3 (one tag to bind them).

Select the new template style ([scriv4lean] Table of Scripts). Enter `&lt;​$leanpub:listof:scripts&gt;` into the Prefix field. Enter `&lt;/​$leanpub:listof:scripts&gt;` into the suffix field.

As before, the `$leanpub:listof:` part of the prefix/suffix is fixed and must not be changed. The `script` tag binds the template style with the caption style.

You can now use the new caption style to mark captions and the new template style to generate a table of contents. See &lt;@A:appendix_myWorkflow_scripts&gt; and &lt;@A:listOfScripts&gt; for an example.

</Text>
        </Document>
    </Documents>
</SearchIndexes>
